---
import { FIGHTERS } from "@/consts/fighters"
import BoxerCard from "./BoxerCard.astro"

const firstRow = FIGHTERS.slice(0, 6)
const leftRow = firstRow.slice(0, 3)
const rightRow = firstRow.slice(3)
const secondRow = FIGHTERS.slice(6)
const secondLeftRow = secondRow.slice(0, 4)
---

<section class="relative flex min-h-screen w-full">
  <div
    class="bg-[url('/images/hero.png')] bg-cover bg-center w-full mask-fade-bottom absolute inset-0"
  >
  </div>

  <div class="relative flex flex-col items-center p-8 w-full text-center">
    <div
      id="landing"
      class="absolute inset-0 flex flex-col items-center w-full py-32"
    >
      <h3
        class="font-light text-theme-seashell leading-[100%] mt-4 animate-fade-in animate-delay-300"
      >
        <strong>26</strong> DE <br /><strong>JULIO</strong>
      </h3>
      <figure class="relative mt-8 animate-fade-in">
        <img
          class="w-64 h-auto z-20 relative"
          src="/images/logo.png"
          fetchpriority="high"
          alt="La Velada del AÃ±o V"
          decoding="async"
        />
        <div class="absolute bg-pink-400/80 blur-2xl z-0 size-64 top-0"></div>
      </figure>
      <h3
        class="font-light text-theme-seashell leading-[100%] mt-4 animate-fade-in animate-delay-500"
      >
        ESTADIO<br />LA CARTUJA,<br /><strong>SEVILLA</strong>
      </h3>
      <h3
        class="font-light text-theme-raisin-black leading-[100%] mt-4 animate-fade-in animate-delay-700"
      >
        <a
          href="https://twitch.tv/ibai"
          rel="noopener noreferrer"
          target="_blank"
          class="inline-block transition hover:scale-125"
        >
          TWITCH.TV<br /><strong>IBAI</strong>
        </a>
      </h3>
    </div>

    <div
      id="fighter-container"
      class="pointer-events-none absolute inset-0 flex flex-col items-center"
    >
      <div
        class="relative top-24 mx-auto h-20 flex w-full items-center justify-center"
      >
        {
          FIGHTERS.map(({ id, name }) => {
            const opponent = FIGHTERS.find(f => f.id === id)?.opponent
            const opponentName = FIGHTERS.find(f => f.id === opponent)?.name
            const isLeftSide = [...leftRow, ...secondLeftRow].some(fighter => fighter.id === id)

            return (
              <div data-id={`hero-text-${id}`} class="hidden absolute w-full flex justify-center items-center gap-10">
                <img
                  src={`/images/fighters/text/${id}.png`}
                  alt={name}
                  decoding="async"
                  class={`max-w-sm z-21 mask-fade-text ${isLeftSide ? 'order-1' : 'order-3'}`}
                  fetchpriority="low"
                />
                {opponent && opponentName && (
                  <img
                    src={`/images/fighters/text/${opponent}.png`}
                    alt={opponentName}
                    decoding="async"
                    class={`max-w-sm z-21  mask-fade-text ${isLeftSide ? 'order-3' : 'order-1'}`}
                    fetchpriority="low"
                  />
                )}
              </div>
            )
          })
        }
      </div>

      <div
        class="mask-fade-bottom relative bottom-0 mx-auto h-[80vh] flex w-full items-center justify-center"
      >
        {
          FIGHTERS.map(({ id, name }) => {
            const isLeftSide = [...leftRow, ...secondLeftRow].some(fighter => fighter.id === id)
            const animationClass = isLeftSide ? 'animate-fade-left' : 'animate-fade-right'
            const mainTranslate = isLeftSide ? '-translate-x-64' : 'translate-x-64'
            const opponentTranslate = isLeftSide ? 'translate-x-64' : '-translate-x-64'
            
            return (
              <div data-fighter-wrapper={id} class="hidden absolute inset-0 flex items-center justify-center">
                <img
                  transition:name={`image-${id}`}
                  data-id={`hero-image-${id}`}
                  src={`/images/fighters/big/${id}.png`}
                  alt={name}
                  decoding="async"
                  class={`w-auto h-full absolute ${animationClass} ${mainTranslate} z-20`}
                  fetchpriority="low"
                />
                <p class="text-white z-30 text-5xl">VS</p>
                {FIGHTERS.find(f => f.id === id)?.opponent && (
                  <img
                    data-id={`hero-image-${FIGHTERS.find(f => f.id === id)?.opponent}`}
                    src={`/images/fighters/big/${FIGHTERS.find(f => f.id === id)?.opponent}.png`}
                    alt={FIGHTERS.find(f => f.id === FIGHTERS.find(f => f.id === id)?.opponent)?.name}
                    decoding="async"
                    class={`w-auto h-full absolute ${!isLeftSide ? 'animate-fade-left' : 'animate-fade-right'} ${opponentTranslate} z-10`}
                    fetchpriority="low"
                  />
                )}
              </div>
            )
          })
        }
      </div>
    </div>

    <div
      class="relative flex flex-col items-center justify-end p-8 h-full w-full max-w-6xl gap-4"
    >
      <div class="flex flex-wrap justify-between w-full px-4">
        <div class="flex flex-wrap justify-start gap-4">
          {leftRow.map(({ id, name, opponent }) => (
            <BoxerCard id={id} name={name} opponent={opponent} />
          ))}
        </div>
        <div class="flex flex-wrap justify-end gap-4">
          {rightRow.map(({ id, name, opponent }) => <BoxerCard id={id} name={name} opponent={opponent} />)}
        </div>
      </div>

      <div class="flex flex-wrap justify-between gap-4">
        {secondRow.map(({ id, name, opponent }) => <BoxerCard id={id} name={name} opponent={opponent} />)}
      </div>
    </div>
  </div>
</section>

<style>
  .mask-fade-text {
    mask-image: linear-gradient(
      to bottom,
      transparent 5%,
      black 6%,
      black 95%,
      transparent 100%
    );
  }

  @keyframes fadeRight {
    from {
      opacity: 0;
      transform: translateX(100px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes fadeLeft {
    from {
      opacity: 0;
      transform: translateX(-100px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .animate-fade-right {
    animation: fadeRight 0.5s ease-out forwards;
  }

  .animate-fade-left {
    animation: fadeLeft 0.5s ease-out forwards;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const $landing = document.querySelector("#landing")
    let currentFighterId: string | null = null
    let currentOpponentId: string | null = null

    const showFighter = (id: string) => {
      document
        .querySelector(`[data-id="hero-text-${id}"]`)
        ?.classList.remove("hidden")

      document
        .querySelector(`[data-fighter-wrapper="${id}"]`)
        ?.classList.remove("hidden")
    }

    const hideFighter = (id: string) => {
      document
        .querySelector(`[data-id="hero-text-${id}"]`)
        ?.classList.add("hidden")

      document
        .querySelector(`[data-fighter-wrapper="${id}"]`)
        ?.classList.add("hidden")
    }

    document.addEventListener("boxer-card-exit", () => {
      $landing?.classList.remove("hidden")

      if (currentFighterId) {
        hideFighter(currentFighterId)
        if (currentOpponentId) hideFighter(currentOpponentId)
        currentFighterId = null
        currentOpponentId = null
      }
    })

    document.addEventListener("boxer-card-hovered", (event: Event) => {
      const customEvent = event as CustomEvent<{ id: string, opponent: string }>
      const { id, opponent } = customEvent.detail

      if (currentFighterId === id) return

      if (currentFighterId) {
        hideFighter(currentFighterId)
        if (currentOpponentId) hideFighter(currentOpponentId)
      }

      $landing?.classList.add("hidden")

      showFighter(id)
      if (opponent) showFighter(opponent)

      currentFighterId = id
      currentOpponentId = opponent
    })
  })
</script>
